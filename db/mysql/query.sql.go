// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: query.sql

package mysql

import (
	"context"
	"database/sql"
)

const findDomainByHostAndNameLike1 = `-- name: FindDomainByHostAndNameLike1 :many
select id, host, name, value, ttl, dns_type, deny_global, status, create_time, update_time
from domain
where host = ?
  and name = ?
`

type FindDomainByHostAndNameLike1Params struct {
	Host string
	Name string
}

// FindDomainByHostAndNameLike1 查询客户端专属的解析
func (q *Queries) FindDomainByHostAndNameLike1(ctx context.Context, arg FindDomainByHostAndNameLike1Params) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, findDomainByHostAndNameLike1, arg.Host, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.Value,
			&i.Ttl,
			&i.DnsType,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDomainByHostAndNameLike2 = `-- name: FindDomainByHostAndNameLike2 :many
select id, host, name, value, ttl, dns_type, deny_global, status, create_time, update_time
from domain
where host = ?
  and (name = ? or name = ?)
`

type FindDomainByHostAndNameLike2Params struct {
	Host   string
	Name   string
	Name_2 string
}

// FindDomainByHostAndNameLike2 查询客户端专属的解析
func (q *Queries) FindDomainByHostAndNameLike2(ctx context.Context, arg FindDomainByHostAndNameLike2Params) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, findDomainByHostAndNameLike2, arg.Host, arg.Name, arg.Name_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.Value,
			&i.Ttl,
			&i.DnsType,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDomainByHostAndNameLike3 = `-- name: FindDomainByHostAndNameLike3 :many
select id, host, name, value, ttl, dns_type, deny_global, status, create_time, update_time
from domain
where host = ?
  and (name = ? or name = ? or name = ?)
`

type FindDomainByHostAndNameLike3Params struct {
	Host   string
	Name   string
	Name_2 string
	Name_3 string
}

// FindDomainByHostAndNameLike3 查询客户端专属的解析
func (q *Queries) FindDomainByHostAndNameLike3(ctx context.Context, arg FindDomainByHostAndNameLike3Params) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, findDomainByHostAndNameLike3,
		arg.Host,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.Value,
			&i.Ttl,
			&i.DnsType,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDomainByHostAndNameLike4 = `-- name: FindDomainByHostAndNameLike4 :many
select id, host, name, value, ttl, dns_type, deny_global, status, create_time, update_time
from domain
where host = ?
  and (name = ? or name = ? or name = ? or name = ?)
`

type FindDomainByHostAndNameLike4Params struct {
	Host   string
	Name   string
	Name_2 string
	Name_3 string
	Name_4 string
}

// FindDomainByHostAndNameLike4 查询客户端专属的解析
func (q *Queries) FindDomainByHostAndNameLike4(ctx context.Context, arg FindDomainByHostAndNameLike4Params) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, findDomainByHostAndNameLike4,
		arg.Host,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Name_4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.Value,
			&i.Ttl,
			&i.DnsType,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDomainByHostAndNameLike5 = `-- name: FindDomainByHostAndNameLike5 :many
select id, host, name, value, ttl, dns_type, deny_global, status, create_time, update_time
from domain
where host = ?
  and (name = ? or name = ? or name = ? or name = ? or name = ?)
`

type FindDomainByHostAndNameLike5Params struct {
	Host   string
	Name   string
	Name_2 string
	Name_3 string
	Name_4 string
	Name_5 string
}

// FindDomainByHostAndNameLike5 查询客户端专属的解析
func (q *Queries) FindDomainByHostAndNameLike5(ctx context.Context, arg FindDomainByHostAndNameLike5Params) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, findDomainByHostAndNameLike5,
		arg.Host,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Name_4,
		arg.Name_5,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.Value,
			&i.Ttl,
			&i.DnsType,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDomainByHostAndNameLike6 = `-- name: FindDomainByHostAndNameLike6 :many
select id, host, name, value, ttl, dns_type, deny_global, status, create_time, update_time
from domain
where host = ?
  and (name = ? or name = ? or name = ? or name = ? or name = ? or name = ?)
`

type FindDomainByHostAndNameLike6Params struct {
	Host   string
	Name   string
	Name_2 string
	Name_3 string
	Name_4 string
	Name_5 string
	Name_6 string
}

// FindDomainByHostAndNameLike6 查询客户端专属的解析
func (q *Queries) FindDomainByHostAndNameLike6(ctx context.Context, arg FindDomainByHostAndNameLike6Params) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, findDomainByHostAndNameLike6,
		arg.Host,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Name_4,
		arg.Name_5,
		arg.Name_6,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.Value,
			&i.Ttl,
			&i.DnsType,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDomainGlobalByName1 = `-- name: FindDomainGlobalByName1 :many
select id, host, name, value, ttl, dns_type, deny_global, status, create_time, update_time
from domain
where name = ?
  and (host = ''
    or host is null)
  and status = 'ENABLE'
`

// FindDomainGlobalByName1 查询指定域名的全局解析
func (q *Queries) FindDomainGlobalByName1(ctx context.Context, name string) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, findDomainGlobalByName1, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.Value,
			&i.Ttl,
			&i.DnsType,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDomainGlobalByName2 = `-- name: FindDomainGlobalByName2 :many
select id, host, name, value, ttl, dns_type, deny_global, status, create_time, update_time
from domain
where (name = ? or name = ?)
  and (host = ''
    or host is null)
  and status = 'ENABLE'
`

type FindDomainGlobalByName2Params struct {
	Name   string
	Name_2 string
}

// FindDomainGlobalByName2 查询指定域名的全局解析
func (q *Queries) FindDomainGlobalByName2(ctx context.Context, arg FindDomainGlobalByName2Params) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, findDomainGlobalByName2, arg.Name, arg.Name_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.Value,
			&i.Ttl,
			&i.DnsType,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDomainGlobalByName3 = `-- name: FindDomainGlobalByName3 :many
select id, host, name, value, ttl, dns_type, deny_global, status, create_time, update_time
from domain
where (name = ? or name = ? or name = ?)
  and (host = ''
    or host is null)
  and status = 'ENABLE'
`

type FindDomainGlobalByName3Params struct {
	Name   string
	Name_2 string
	Name_3 string
}

// FindDomainGlobalByName3 查询指定域名的全局解析
func (q *Queries) FindDomainGlobalByName3(ctx context.Context, arg FindDomainGlobalByName3Params) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, findDomainGlobalByName3, arg.Name, arg.Name_2, arg.Name_3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.Value,
			&i.Ttl,
			&i.DnsType,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDomainGlobalByName4 = `-- name: FindDomainGlobalByName4 :many
select id, host, name, value, ttl, dns_type, deny_global, status, create_time, update_time
from domain
where (name = ? or name = ? or name = ? or name = ?)
  and (host = ''
    or host is null)
  and status = 'ENABLE'
`

type FindDomainGlobalByName4Params struct {
	Name   string
	Name_2 string
	Name_3 string
	Name_4 string
}

// FindDomainGlobalByName4 查询指定域名的全局解析
func (q *Queries) FindDomainGlobalByName4(ctx context.Context, arg FindDomainGlobalByName4Params) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, findDomainGlobalByName4,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Name_4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.Value,
			&i.Ttl,
			&i.DnsType,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDomainGlobalByName5 = `-- name: FindDomainGlobalByName5 :many
select id, host, name, value, ttl, dns_type, deny_global, status, create_time, update_time
from domain
where (name = ? or name = ? or name = ? or name = ? or name = ?)
  and (host = ''
    or host is null)
  and status = 'ENABLE'
`

type FindDomainGlobalByName5Params struct {
	Name   string
	Name_2 string
	Name_3 string
	Name_4 string
	Name_5 string
}

// FindDomainGlobalByName5 查询指定域名的全局解析
func (q *Queries) FindDomainGlobalByName5(ctx context.Context, arg FindDomainGlobalByName5Params) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, findDomainGlobalByName5,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Name_4,
		arg.Name_5,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.Value,
			&i.Ttl,
			&i.DnsType,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findDomainGlobalByName6 = `-- name: FindDomainGlobalByName6 :many
select id, host, name, value, ttl, dns_type, deny_global, status, create_time, update_time
from domain
where (name = ? or name = ? or name = ? or name = ? or name = ? or name = ?)
  and (host = ''
    or host is null)
  and status = 'ENABLE'
`

type FindDomainGlobalByName6Params struct {
	Name   string
	Name_2 string
	Name_3 string
	Name_4 string
	Name_5 string
	Name_6 string
}

// FindDomainGlobalByName6 查询指定域名的全局解析
func (q *Queries) FindDomainGlobalByName6(ctx context.Context, arg FindDomainGlobalByName6Params) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, findDomainGlobalByName6,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Name_4,
		arg.Name_5,
		arg.Name_6,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.Value,
			&i.Ttl,
			&i.DnsType,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findForwardByHost = `-- name: FindForwardByHost :many
select host, name, deny_global
from forward
where status = 'ENABLE' and (host = '' or host = ?)
`

type FindForwardByHostRow struct {
	Host       string
	Name       string
	DenyGlobal string
}

// FindForwardByHost 查询客户端的转发域名
func (q *Queries) FindForwardByHost(ctx context.Context, host string) ([]FindForwardByHostRow, error) {
	rows, err := q.db.QueryContext(ctx, findForwardByHost, host)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindForwardByHostRow
	for rows.Next() {
		var i FindForwardByHostRow
		if err := rows.Scan(&i.Host, &i.Name, &i.DenyGlobal); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findForwardByHostAndNameLike1 = `-- name: FindForwardByHostAndNameLike1 :many
select id, host, name, dns_svr, deny_global, status, create_time, update_time
from forward
where host = ?
  and name = ?
`

type FindForwardByHostAndNameLike1Params struct {
	Host string
	Name string
}

// FindForwardByHostAndNameLike1 查询客户端专属的转发
func (q *Queries) FindForwardByHostAndNameLike1(ctx context.Context, arg FindForwardByHostAndNameLike1Params) ([]Forward, error) {
	rows, err := q.db.QueryContext(ctx, findForwardByHostAndNameLike1, arg.Host, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Forward
	for rows.Next() {
		var i Forward
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.DnsSvr,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findForwardByHostAndNameLike2 = `-- name: FindForwardByHostAndNameLike2 :many
select id, host, name, dns_svr, deny_global, status, create_time, update_time
from forward
where host = ?
  and (name = ? or name = ?)
`

type FindForwardByHostAndNameLike2Params struct {
	Host   string
	Name   string
	Name_2 string
}

// FindForwardByHostAndNameLike2 查询客户端专属的转发
func (q *Queries) FindForwardByHostAndNameLike2(ctx context.Context, arg FindForwardByHostAndNameLike2Params) ([]Forward, error) {
	rows, err := q.db.QueryContext(ctx, findForwardByHostAndNameLike2, arg.Host, arg.Name, arg.Name_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Forward
	for rows.Next() {
		var i Forward
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.DnsSvr,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findForwardByHostAndNameLike3 = `-- name: FindForwardByHostAndNameLike3 :many
select id, host, name, dns_svr, deny_global, status, create_time, update_time
from forward
where host = ?
  and (name = ? or name = ? or name = ?)
`

type FindForwardByHostAndNameLike3Params struct {
	Host   string
	Name   string
	Name_2 string
	Name_3 string
}

// FindForwardByHostAndNameLike3 查询客户端专属的转发
func (q *Queries) FindForwardByHostAndNameLike3(ctx context.Context, arg FindForwardByHostAndNameLike3Params) ([]Forward, error) {
	rows, err := q.db.QueryContext(ctx, findForwardByHostAndNameLike3,
		arg.Host,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Forward
	for rows.Next() {
		var i Forward
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.DnsSvr,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findForwardByHostAndNameLike4 = `-- name: FindForwardByHostAndNameLike4 :many
select id, host, name, dns_svr, deny_global, status, create_time, update_time
from forward
where host = ?
  and (name = ? or name = ? or name = ? or name = ?)
`

type FindForwardByHostAndNameLike4Params struct {
	Host   string
	Name   string
	Name_2 string
	Name_3 string
	Name_4 string
}

// FindForwardByHostAndNameLike4 查询客户端专属的转发
func (q *Queries) FindForwardByHostAndNameLike4(ctx context.Context, arg FindForwardByHostAndNameLike4Params) ([]Forward, error) {
	rows, err := q.db.QueryContext(ctx, findForwardByHostAndNameLike4,
		arg.Host,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Name_4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Forward
	for rows.Next() {
		var i Forward
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.DnsSvr,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findForwardByHostAndNameLike5 = `-- name: FindForwardByHostAndNameLike5 :many
select id, host, name, dns_svr, deny_global, status, create_time, update_time
from forward
where host = ?
  and (name = ? or name = ? or name = ? or name = ? or name = ?)
`

type FindForwardByHostAndNameLike5Params struct {
	Host   string
	Name   string
	Name_2 string
	Name_3 string
	Name_4 string
	Name_5 string
}

// FindForwardByHostAndNameLike5 查询客户端专属的转发
func (q *Queries) FindForwardByHostAndNameLike5(ctx context.Context, arg FindForwardByHostAndNameLike5Params) ([]Forward, error) {
	rows, err := q.db.QueryContext(ctx, findForwardByHostAndNameLike5,
		arg.Host,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Name_4,
		arg.Name_5,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Forward
	for rows.Next() {
		var i Forward
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.DnsSvr,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findForwardByHostAndNameLike6 = `-- name: FindForwardByHostAndNameLike6 :many
select id, host, name, dns_svr, deny_global, status, create_time, update_time
from forward
where host = ?
  and (name = ? or name = ? or name = ? or name = ? or name = ? or name = ?)
`

type FindForwardByHostAndNameLike6Params struct {
	Host   string
	Name   string
	Name_2 string
	Name_3 string
	Name_4 string
	Name_5 string
	Name_6 string
}

// FindForwardByHostAndNameLike6 查询客户端专属的转发
func (q *Queries) FindForwardByHostAndNameLike6(ctx context.Context, arg FindForwardByHostAndNameLike6Params) ([]Forward, error) {
	rows, err := q.db.QueryContext(ctx, findForwardByHostAndNameLike6,
		arg.Host,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Name_4,
		arg.Name_5,
		arg.Name_6,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Forward
	for rows.Next() {
		var i Forward
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.DnsSvr,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findForwardGlobalByName1 = `-- name: FindForwardGlobalByName1 :many
select id, host, name, dns_svr, deny_global, status, create_time, update_time
from forward
where name = ?
  and (host = ''
    or host is null)
  and status = 'ENABLE'
`

// FindForwardGlobalByName1 查询指定域名的全局转发
func (q *Queries) FindForwardGlobalByName1(ctx context.Context, name string) ([]Forward, error) {
	rows, err := q.db.QueryContext(ctx, findForwardGlobalByName1, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Forward
	for rows.Next() {
		var i Forward
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.DnsSvr,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findForwardGlobalByName2 = `-- name: FindForwardGlobalByName2 :many
select id, host, name, dns_svr, deny_global, status, create_time, update_time
from forward
where (name = ? or name = ?)
  and (host = ''
    or host is null)
  and status = 'ENABLE'
`

type FindForwardGlobalByName2Params struct {
	Name   string
	Name_2 string
}

// FindForwardGlobalByName2 查询指定域名的全局转发
func (q *Queries) FindForwardGlobalByName2(ctx context.Context, arg FindForwardGlobalByName2Params) ([]Forward, error) {
	rows, err := q.db.QueryContext(ctx, findForwardGlobalByName2, arg.Name, arg.Name_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Forward
	for rows.Next() {
		var i Forward
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.DnsSvr,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findForwardGlobalByName3 = `-- name: FindForwardGlobalByName3 :many
select id, host, name, dns_svr, deny_global, status, create_time, update_time
from forward
where (name = ? or name = ? or name = ?)
  and (host = ''
    or host is null)
  and status = 'ENABLE'
`

type FindForwardGlobalByName3Params struct {
	Name   string
	Name_2 string
	Name_3 string
}

// FindForwardGlobalByName3 查询指定域名的全局转发
func (q *Queries) FindForwardGlobalByName3(ctx context.Context, arg FindForwardGlobalByName3Params) ([]Forward, error) {
	rows, err := q.db.QueryContext(ctx, findForwardGlobalByName3, arg.Name, arg.Name_2, arg.Name_3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Forward
	for rows.Next() {
		var i Forward
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.DnsSvr,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findForwardGlobalByName4 = `-- name: FindForwardGlobalByName4 :many
select id, host, name, dns_svr, deny_global, status, create_time, update_time
from forward
where (name = ? or name = ? or name = ? or name = ?)
  and (host = ''
    or host is null)
  and status = 'ENABLE'
`

type FindForwardGlobalByName4Params struct {
	Name   string
	Name_2 string
	Name_3 string
	Name_4 string
}

// FindForwardGlobalByName4 查询指定域名的全局转发
func (q *Queries) FindForwardGlobalByName4(ctx context.Context, arg FindForwardGlobalByName4Params) ([]Forward, error) {
	rows, err := q.db.QueryContext(ctx, findForwardGlobalByName4,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Name_4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Forward
	for rows.Next() {
		var i Forward
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.DnsSvr,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findForwardGlobalByName5 = `-- name: FindForwardGlobalByName5 :many
select id, host, name, dns_svr, deny_global, status, create_time, update_time
from forward
where (name = ? or name = ? or name = ? or name = ? or name = ?)
  and (host = ''
    or host is null)
  and status = 'ENABLE'
`

type FindForwardGlobalByName5Params struct {
	Name   string
	Name_2 string
	Name_3 string
	Name_4 string
	Name_5 string
}

// FindForwardGlobalByName5 查询指定域名的全局转发
func (q *Queries) FindForwardGlobalByName5(ctx context.Context, arg FindForwardGlobalByName5Params) ([]Forward, error) {
	rows, err := q.db.QueryContext(ctx, findForwardGlobalByName5,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Name_4,
		arg.Name_5,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Forward
	for rows.Next() {
		var i Forward
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.DnsSvr,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findForwardGlobalByName6 = `-- name: FindForwardGlobalByName6 :many
select id, host, name, dns_svr, deny_global, status, create_time, update_time
from forward
where (name = ? or name = ? or name = ? or name = ? or name = ? or name = ?)
  and (host = ''
    or host is null)
  and status = 'ENABLE'
`

type FindForwardGlobalByName6Params struct {
	Name   string
	Name_2 string
	Name_3 string
	Name_4 string
	Name_5 string
	Name_6 string
}

// FindForwardGlobalByName6 查询指定域名的全局转发
func (q *Queries) FindForwardGlobalByName6(ctx context.Context, arg FindForwardGlobalByName6Params) ([]Forward, error) {
	rows, err := q.db.QueryContext(ctx, findForwardGlobalByName6,
		arg.Name,
		arg.Name_2,
		arg.Name_3,
		arg.Name_4,
		arg.Name_5,
		arg.Name_6,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Forward
	for rows.Next() {
		var i Forward
		if err := rows.Scan(
			&i.ID,
			&i.Host,
			&i.Name,
			&i.DnsSvr,
			&i.DenyGlobal,
			&i.Status,
			&i.CreateTime,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findHistoryByName = `-- name: FindHistoryByName :one
select id, name, history, create_time, update_time
from history
where name = ?
`

// FindHistoryByName 查询历史
func (q *Queries) FindHistoryByName(ctx context.Context, name string) (History, error) {
	row := q.db.QueryRowContext(ctx, findHistoryByName, name)
	var i History
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.History,
		&i.CreateTime,
		&i.UpdateTime,
	)
	return i, err
}

const insertHistory = `-- name: InsertHistory :exec
insert into history(name, history)
VALUES (?, ?)
`

type InsertHistoryParams struct {
	Name    string
	History sql.NullString
}

// InsertHistory 插入历史
func (q *Queries) InsertHistory(ctx context.Context, arg InsertHistoryParams) error {
	_, err := q.db.ExecContext(ctx, insertHistory, arg.Name, arg.History)
	return err
}

const updateHistory = `-- name: UpdateHistory :exec
update history
set history = ?
where name = ?
`

type UpdateHistoryParams struct {
	History sql.NullString
	Name    string
}

// UpdateHistory 更新历史
func (q *Queries) UpdateHistory(ctx context.Context, arg UpdateHistoryParams) error {
	_, err := q.db.ExecContext(ctx, updateHistory, arg.History, arg.Name)
	return err
}
